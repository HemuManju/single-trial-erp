import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from time import time
import mne
from mne.channels import make_standard_montage
from mne.preprocessing import ICA

def load_raw_data(raw_fname=r"C:\Users\elahe\Downloads\sub-001_task-lumfront_eeg.bdf", tmin=0, tmax=60):
    """Load and crop raw EEG data."""
    try:
        raw = mne.io.read_raw_bdf(raw_fname, preload=True).crop(tmin, tmax)
        return raw
    except FileNotFoundError:
        raise FileNotFoundError(f"Could not find file: {raw_fname}")

def set_montage(raw):
    """Apply a standard montage for channel locations, ignoring missing channels."""
    montage = make_standard_montage('standard_1005')  # 10-10 system
    raw.set_montage(montage, on_missing='warn')  # Warn about unmapped channels
    return raw

def pick_eeg_channels(raw):
    """Select only EEG channels, excluding EXG."""
    eeg_channels = [ch for ch in raw.ch_names if not ch.startswith('EXG')]
    if not eeg_channels:
        raise ValueError("No EEG channels found in the data.")
    raw.pick(eeg_channels)
    return raw

def preprocess_data(raw):
    """Preprocess raw data with bandpass filter."""
    raw.filter(l_freq=1.0, h_freq=60.0)
    return raw

def run_ica(raw, reject=None, n_components=20):
    """Fit ICA on raw data and plot components."""
    ica = ICA(n_components=n_components, method="picard", random_state=0)
    t0 = time()
    ica.fit(raw, reject=reject)
    fit_time = time() - t0
    title = f"ICA decomposition using picard (took {fit_time:.1f}s)"
    ica.plot_components(title=title, inst=raw, show=True)
    return ica

def exclude_artifacts(ica):
    """Manually exclude artifact-related components."""
    ica.exclude = [0, 3, 5]  # Replace with indices of artifact components after inspection
    return ica

def apply_ica(ica, raw):
    """Apply ICA to remove artifacts."""
    raw = ica.apply(raw)
    return raw

def validate_results(raw):
    raw.plot(scalings='auto', n_channels=64, duration=20, show=True)  # Show 10 channels, 20 seconds

def run_ica_pipeline():
    """Run the complete ICA preprocessing pipeline."""
    raw = load_raw_data()
    raw = set_montage(raw)  # Apply montage
    raw = pick_eeg_channels(raw)  # Select EEG channels
    raw = preprocess_data(raw)  # Filter data
    ica = run_ica(raw)  # Fit and plot ICA
    ica = exclude_artifacts(ica)  # Exclude artifact components
    raw = apply_ica(ica, raw)  # Apply ICA
    validate_results(raw)  # Plot cleaned data

if __name__ == "__main__":
    run_ica_pipeline()